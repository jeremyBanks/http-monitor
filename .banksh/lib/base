#!/bin/bash

{ # Check preconditions and set Bash settings.
  if (( "${BASH_VERSINFO[0]:-0}" <= 3 )); then
   echo "FATAL: bash>=4.2 required, but using: $("$(command -v "$(ps -cp "$$" -o command=)")" --version)"
   exit 1
  elif [[ "$(basename "${BASH_SOURCE[0]}")" == "base" ]]; then
   echo 'FATAL: base should be evaled:'
   # shellcheck disable=SC2016
   echo '  eval "$(cat "$(dirname "$0")/base")"'
   exit 1
  elif [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
   echo "FATAL: ${BASH_SOURCE[0]} is a script, not a library. Execute it, don't source it."
   exit 1
  fi

  # shellcheck disable=SC2034
  readonly BASH_COMPAT=4.2

  set -o monitor -o pipefail -o errexit -o errtrace -o functrace -o nounset -o noclobber
  shopt -s nullglob globstar expand_aliases
  shopt -u sourcepath
}

{ # Declare global constants.
  readonly __owd__="$(realpath "$(pwd)")"
  readonly __file__="$(realpath "${BASH_SOURCE[0]}")"
  readonly __name__="$(basename "${__file__}")"
  readonly __dir__="$(dirname "${__file__}")"
  readonly __tmp__="$(mktemp --directory --tmpdir "${__name__}$(date +-%Y%m%d%H%M-XXXX)")"
  readonly __argv__=("$@")
}

{ # Set working directory and sanity-check paths.
  cd "${__tmp__}"
  test -d "${__owd__}"
  test -f "${__file__}"
  test -d "${__dir__}"
  test -f "${__dir__}/${__name__}"
  test -d "${__tmp__}"
  cd "${__dir__}"
}

{ # Set environment variables.
  readonly TERM="${TERM=dumb}"
  export TERM

  if [[ "${CI:-}" == "true" ]]; then
   readonly CI=true
   export CI
  else
   readonly CI=false
   export -n CI
  fi
}

{ # Sugar.

  # But this ruins shellcheck... :(
  alias var=declare
  alias let="declare -r"
  alias fn=function
}
