#!/bin/bash
set -euo pipefail
shopt -s inherit_errexit nullglob compat"${BASH_COMPAT=42}"

declare repo
repo="$(git rev-parse --show-toplevel)"
cd "$repo"
git config alias.wipe '!.banksh/bin/git-wipe'

declare wipe_all=""
for arg in "$@"; do
    if [[ $arg = "--all" ]]; then
        wipe_all="true"
    fi
done

declare upstream_ref
if [[ ! "$wipe_all" ]]; then
    upstream_ref="$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)")"
fi

declare commit_count
commit_count="$(git rev-list --count ${upstream_ref:+--ancestry-path $upstream_ref..}HEAD)"

if [[ $commit_count = 0 ]]; then 
    echo "No commits would be affected."
    exit 1
fi

echo "$(tput bold; tput setaf 1)This will wipe all messages and authors, and smear timestamps, from all $commit_count commits${upstream_ref:+" that haven't been pushed to $upstream_ref"}.$(tput sgr0)"
echo
printf "%s" "Please wait a moment and confirm that this is what you want to do."
while read -s -n 1 -t 4 -r; do
    if [[ "$REPLY" =~ ^[Nn]$ ]]; then
        echo
        exit 1
    fi
    printf "\r%s" "$(tput el; tput bold; tput setaf 1)Please wait a moment$(tput sgr0) or press N to quit."
done
printf "\r"
read -p "$(tput el; tput bold; tput setaf 1)Press Y to proceed with wipe.$(tput sgr0) Press N to quit. $(tput smul)" -n 1 -r
echo "$(tput sgr0)"

if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
    exit 1
fi

declare wiped
wiped="$(git rev-parse HEAD)"

git tag "wiped/${wiped:0:4}" "$wiped" 2>/dev/null || :

export GIT_AUTHOR_NAME="${GIT_AUTHOR_NAME:-${GIT_COMMITTER_NAME:-$(git config user.name)}}"
export GIT_AUTHOR_EMAIL="${GIT_AUTHOR_EMAIL:-${GIT_COMMITTER_EMAIL:-$(git config user.email)}}"
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

declare git_wip
git_wip="$(mktemp -t git-wipe-XXXX.bash)"

cat <"$(dirname "${BASH_SOURCE[0]}")/git-wip" >"$git_wip"

declare wipe_env
wipe_env="
export GIT_ORIGINAL_PARENTS
GIT_ORIGINAL_PARENTS=\$(git log --pretty=%P -1 \$GIT_COMMIT)
export GIT_PARENTS="'"'"\$GIT_ORIGINAL_PARENTS"'"'"
if [ ! -z "'"'"\$GIT_PARENTS"'"'" ]; then
    GIT_PARENTS="'"'"\$(map \${GIT_ORIGINAL_PARENTS})"'"'"
fi

export GIT_AUTHOR_NAME="'"'"$GIT_AUTHOR_NAME"'"'"
export GIT_AUTHOR_EMAIL="'"'"$GIT_AUTHOR_EMAIL"'"'"
export GIT_COMMITTER_NAME="'"'"$GIT_COMMITTER_NAME"'"'"
export GIT_COMMITTER_EMAIL="'"'"$GIT_COMMITTER_EMAIL"'"'"
eval "'"'"\$(bash $git_wip)"'"'""

export FILTER_BRANCH_SQUELCH_WARNING=true

git --no-pager log --format=raw --graph --decorate -n 2 "$wiped"
git filter-branch --force --env-filter "${wipe_env}" --msg-filter "${wipe_env}; echo \${GIT_COMMIT_MESSAGE}" ${upstream_ref:+"$upstream_ref.."}HEAD
git --no-pager log --format=raw --graph --decorate -n 2

rm -rf "$git_wip"
